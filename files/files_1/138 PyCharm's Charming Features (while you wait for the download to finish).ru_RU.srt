1
00:00:00,480 --> 00:00:05,480
До сих пор мы использовали Repl.it в качестве редактора кода, и у Repl.it есть

2
00:00:06,330 --> 00:00:11,330
множество замечательных функций, таких как простота обмена кодом и создания копий

3
00:00:12,720 --> 00:00:17,370
один и тот же код, чтобы вы всегда могли получить начальный код и конечный код.

4
00:00:18,120 --> 00:00:21,090
Но у Repl.it есть свои ограничения.

5
00:00:21,600 --> 00:00:26,600
И по мере того, как вы становитесь все более и более продвинутым и начинаете строить больше

6
00:00:26,610 --> 00:00:31,380
сложные проекты, вы начнете чувствовать ограничения простого текстового редактора

7
00:00:31,410 --> 00:00:36,390
как Repl.it. Теперь PyCharm — это инструмент, которым пользуются профессионалы.

8
00:00:36,900 --> 00:00:41,280
И я хочу показать вам пару функций, чтобы вы могли воочию убедиться, почему

я
00:00:41,280 --> 00:00:44,340
PyCharm так популярен среди разработчиков Python.

10
00:00:44,640 --> 00:00:48,450
И первое, что мне в ней действительно нравится, так это то, что это очень-очень простая вещь,

11
00:00:48,840 --> 00:00:53,040
это проверка орфографии для английских слов, которые вы используете в своем коде.

12
00:00:53,610 --> 00:00:55,710
Это просто означает, что пока вы пишете код,

13
00:00:55,710 --> 00:00:59,970
вы создаете имена для своих переменных, создаете свои ключи, свои значения,

14
00:01:00,450 --> 00:01:05,160
или ваши печатные заявления, чтобы убедиться, что английский язык, который вы пишете,

15
00:01:05,160 --> 00:01:09,060
части, которые на самом деле не являются кодом, на самом деле проверены на орфографию

16
00:01:09,240 --> 00:01:12,330
и вы не поверите, сколько раз это спасет вашу кожу.

17
00:01:13,050 --> 00:01:15,840
Вот пример, что-то действительно,

18
00:01:15,840 --> 00:01:19,380
действительно чувствителен к правописанию словарь.

19
00:01:19,770 --> 00:01:24,770
Мы все знаем, что когда мы используем словарь и, скажем, хотим напечатать

20
00:01:26,100 --> 00:01:31,100
одно из значений из нашего словаря. Мы берем наши контакты и держимся

21
00:01:31,860 --> 00:01:36,720
детали Джеймса, а затем мы пытаемся получить его номер телефона.

22
00:01:37,170 --> 00:01:40,230
Теперь, если вы наберете это неправильно, например,

23
00:01:40,230 --> 00:01:44,910
если я написал номер телефона без буквы "е" и попытаюсь запустить это,

24
00:01:45,090 --> 00:01:47,100
тогда вы увидите, я получаю сообщение об ошибке.

25
00:01:47,610 --> 00:01:52,050
Но проверка орфографии уже должна предупредить вас о проблеме еще до того, как вы нажмете

26
00:01:52,050 --> 00:01:55,590
запустить. Посмотрите, как это подчеркивается волнистой линией

27
00:01:55,890 --> 00:01:58,890
и он говорит вам, что в слове фон опечатка,

28
00:01:59,310 --> 00:02:02,610
и вы можете нажать изменить на телефон, может быть.

29
00:02:03,360 --> 00:02:06,300
И это всего лишь тонкий намек на то, чтобы сказать: «Привет,

30
00:02:06,570 --> 00:02:10,800
Я думаю, может быть, вы ошиблись. Просто дважды проверьте». И действительно,

31
00:02:10,830 --> 00:02:11,970
как только мы это исправим,

32
00:02:12,270 --> 00:02:16,290
затем мы избавляемся от всех наших проблем, и все работает отлично.

33
00:02:17,070 --> 00:02:22,070
Следующая особенность, которая мне очень нравится, — это наличие большего пространства для разработки.

34
00:02:23,370 --> 00:02:25,140
Что я имею в виду? Хорошо,

35
00:02:25,200 --> 00:02:29,940
очень часто мы на самом деле склонны иметь более одного файла кода, верно?

36
00:02:30,210 --> 00:02:30,840
Например,

37
00:02:30,840 --> 00:02:35,840
скажем, что мы переместили наши контакты в этот файл данных и импортировали его

38
00:02:37,200 --> 00:02:38,033
вместо.

39
00:02:38,460 --> 00:02:42,870
Так будет сказано из контактов импорта данных.

40
00:02:43,590 --> 00:02:48,590
И теперь, когда я хочу что-то закодировать и хочу заполучить определенные вещи,

41
00:02:49,350 --> 00:02:51,840
например, я хочу получить электронную почту Дженни,

42
00:02:53,190 --> 00:02:57,300
то в идеале я хотел бы увидеть это рядом,

43
00:02:57,300 --> 00:02:59,500
правильно? В PyCharm

44
00:02:59,710 --> 00:03:03,190
все, что вам нужно сделать, чтобы разделить экран, в самый раз

45
00:03:03,190 --> 00:03:06,640
нажмите на файл, а затем скажите разделить и двигаться вправо.

46
00:03:07,390 --> 00:03:10,990
А теперь вдруг вы можете видеть обе стороны сразу.

47
00:03:11,230 --> 00:03:16,120
Это означает, что гораздо проще обратиться к другому фрагменту кода, когда вы

48
00:03:16,120 --> 00:03:16,953
развивающийся.

49
00:03:17,020 --> 00:03:22,020
Итак, теперь я легко вижу, что в ключе для Дженни есть заглавная буква J,

50
00:03:22,540 --> 00:03:24,430
так что я должен подключиться к своим контактам,

51
00:03:24,730 --> 00:03:28,600
нажмите на ключ Дженни, а затем получите ее электронную почту.

52
00:03:29,020 --> 00:03:34,020
Этот разделенный экран очень удобен, когда ваш код становится более сложным и

53
00:03:34,330 --> 00:03:35,890
файлов все больше.

54
00:03:37,240 --> 00:03:42,240
А теперь еще одна продвинутая функция IDE по сравнению с простым текстовым редактором вроде

55
00:03:43,300 --> 00:03:46,630
Repl.it — это встроенный линтер.

56
00:03:47,020 --> 00:03:52,020
Так что же такое линтер? Что ж, линтер в реальной жизни — это то, что

57
00:03:52,510 --> 00:03:53,470
маленькие пылинки,

58
00:03:53,470 --> 00:03:58,470
кусочки ворсинок с вашей одежды, а в программировании это то, что

59
00:04:00,370 --> 00:04:05,370
фрагменты написанного вами кода, которые могут не соответствовать стилю

60
00:04:05,770 --> 00:04:10,540
гид. Когда мы пишем код и пытаемся решить, ну,

61
00:04:10,570 --> 00:04:15,430
сколько пробелов я оставляю между элементами, использую ли я табуляции или пробелы,

62
00:04:15,790 --> 00:04:17,680
какова максимальная длина строки,

63
00:04:18,010 --> 00:04:22,720
все эти вещи, которые, возможно, не сломают вашу программу как таковую,

64
00:04:23,140 --> 00:04:27,550
но это будет означать, что ваша программа может отличаться от чьей-то еще

65
00:04:27,880 --> 00:04:31,630
и вы просто хотите знать, каково соглашение, чтобы вы могли сохранить свой код

66
00:04:31,630 --> 00:04:34,480
в соответствии с другими разработчиками Python. Хорошо,

67
00:04:34,480 --> 00:04:36,760
для этого и предназначено руководство по стилю.

68
00:04:37,030 --> 00:04:41,650
И руководство по стилю, которому будет следовать большинство разработчиков Python,

69
00:04:41,650 --> 00:04:43,000
называется ПКП 8.

70
00:04:43,600 --> 00:04:47,560
И мы уже видели это, когда говорили о табуляциях и пробелах.

71
00:04:47,860 --> 00:04:48,460
Например,

72
00:04:48,460 --> 00:04:53,460
руководство состоит в том, что отступ должен иметь четыре пробела, и он действительно должен

73
00:04:55,360 --> 00:04:57,970
быть пробелами над вкладками.

74
00:04:58,540 --> 00:05:02,020
И еще есть другие вещи, например, максимальная длина строки.

75
00:05:02,050 --> 00:05:04,630
чтобы ваши строки кода не стали действительно,

76
00:05:04,630 --> 00:05:09,630
очень долго и трудно читать, или что-то вроде того, сколько пустых строк должно быть

77
00:05:09,970 --> 00:05:14,970
там между функциями и переменными в вашем коде и всякими вещами.

78
00:05:15,340 --> 00:05:20,340
Это очень длинный документ, и на самом деле очень трудно прочитать его полностью.

79
00:05:21,160 --> 00:05:24,040
и помните все это, пока вы находитесь в середине кодирования.

80
00:05:24,550 --> 00:05:28,030
Но, к счастью для нас, если мы используем PyCharm,

81
00:05:28,300 --> 00:05:33,070
он автоматически применяет эти правила и рекомендации к нашему коду

82
00:05:33,430 --> 00:05:36,130
и анализирует наш код. Например,

83
00:05:36,130 --> 00:05:39,250
если бы мне нужно было создать функцию с именем my_function,

84
00:05:40,030 --> 00:05:41,290
а внутри здесь

85
00:05:41,320 --> 00:05:45,280
У меня только два входа, n1 и n2,

86
00:05:45,820 --> 00:05:50,560
а затем вычисляет сумму, добавляя n1 к n2,

87
00:05:51,220 --> 00:05:55,210
и он возвращает итог в качестве вывода. В настоящее время,

88
00:05:55,420 --> 00:05:59,870
позже я решаю вызвать свою функцию, передав некоторые числа,

89
00:05:59,900 --> 00:06:03,470
может быть, скажем, 4 и 5. Теперь, во-первых,

90
00:06:03,500 --> 00:06:08,500
обратите внимание, как у меня есть светло-желтые волнистые линии под обеими этими линиями.

91
00:06:09,200 --> 00:06:12,320
И когда я навожу курсор на него, мне не нужно на него нажимать.

92
00:06:12,350 --> 00:06:16,400
Я просто держу курсор над строкой с закорючками,

93
00:06:16,820 --> 00:06:17,390
ты можешь видеть

94
00:06:17,390 --> 00:06:22,390
он говорит мне, что в руководстве PEP 8 указано, что должно быть две пустые строки

95
00:06:23,210 --> 00:06:25,550
после определения класса или функции,

96
00:06:25,970 --> 00:06:28,370
но вместо этого он нашел только один.

97
00:06:28,880 --> 00:06:32,510
Таким образом, в основном это пытается сказать, что руководство по стилю говорит, что есть

98
00:06:32,510 --> 00:06:37,510
должно быть две строки после и перед каждой из ваших функций, чтобы все

99
00:06:38,450 --> 00:06:43,430
более разнесены и легче читаются. И вот, когда я нахожусь над ним,

100
00:06:43,760 --> 00:06:47,150
вы можете видеть, что он говорит, что после запятой отсутствует пробел.

101
00:06:47,570 --> 00:06:50,960
Итак, руководство по стилю говорит, что каждый раз, когда вы используете запятую в своем коде,

102
00:06:51,290 --> 00:06:54,920
у вас всегда должно быть место. Таким образом снова

103
00:06:54,920 --> 00:06:59,000
его легче читать, и он обеспечивает согласованность вашего кода с другими Python

104
00:06:59,000 --> 00:07:01,460
разработчиков, чтобы люди, глядя на ваш код,

105
00:07:01,610 --> 00:07:04,700
они увидят, что вы следуете стандартным соглашениям.

106
00:07:05,210 --> 00:07:09,260
Но помните, что это не влияет на то, как работает ваш код.

107
00:07:09,650 --> 00:07:13,610
Даже со всеми этими предложениями и нарушениями правил руководства по стилю,

108
00:07:13,940 --> 00:07:17,420
на самом деле это не означает, что мой код не будет работать. Если я запущу его,

109
00:07:17,540 --> 00:07:21,350
вы можете видеть, что он работает отлично без каких-либо ошибок.

110
00:07:21,770 --> 00:07:26,770
И это всего лишь вопрос поддержания вашего кода в чистоте и соответствия

111
00:07:27,260 --> 00:07:30,890
соглашения, установленные разработчиками Python. В настоящее время,

112
00:07:30,920 --> 00:07:35,920
еще одна расширенная функция IDE по сравнению с текстовым редактором — это возможность

113
00:07:36,650 --> 00:07:38,270
просмотрите свою местную историю.

114
00:07:39,080 --> 00:07:42,980
Что это значит, я могу пойти, чтобы показать историю

115
00:07:43,550 --> 00:07:47,030
и так же, как если бы вы были в браузере, вы можете увидеть свою историю просмотров,

116
00:07:47,360 --> 00:07:50,450
Ну, здесь вы можете увидеть всю свою историю кодирования.

117
00:07:50,810 --> 00:07:55,640
Таким образом, вы можете прокрутить весь путь назад за последние 12 часов и увидеть изменения, которые

118
00:07:55,640 --> 00:08:00,230
вы сделали. Например, сегодня в тринадцать минут пятого,

119
00:08:00,650 --> 00:08:05,030
Я создал эту совершенно новую функцию. Итак, это текущий файл

120
00:08:05,090 --> 00:08:08,150
и вот как это выглядело в тот момент времени.

121
00:08:08,810 --> 00:08:11,390
Теперь прокручивая вперед в будущее,

122
00:08:11,600 --> 00:08:16,600
Следующее, что я сделал, это добавил сюда вызов новой функции и добавил немного пробела.

123
00:08:17,540 --> 00:08:18,373
здесь.

124
00:08:18,500 --> 00:08:23,000
Итак, если у вас были какие-то катастрофические события, и вы понимаете, что вы

125
00:08:23,000 --> 00:08:25,070
совсем запутался, ты все удалил,

126
00:08:25,370 --> 00:08:29,810
вы всегда можете вернуться к предыдущим моментам времени и просто скопировать и

127
00:08:29,810 --> 00:08:30,643
вставьте код.

128
00:08:30,920 --> 00:08:35,060
Или вы можете вернуться к этому конкретному моменту времени.

129
00:08:35,690 --> 00:08:40,340
Можете ли вы представить, если вы пишете свое эссе, и сколько раз я

130
00:08:40,340 --> 00:08:43,310
потерял свое эссе, потому что мой компьютер сломался.

131
00:08:43,760 --> 00:08:48,500
Представьте, если бы у вас была возможность просто прокрутить время назад и найти

132
00:08:48,500 --> 00:08:52,910
снимок, который вам понравился, а затем вернуть все к тому моменту времени,

133
00:08:53,450 --> 00:08:55,830
насколько мощным это может быть? Хорошо,

134
00:08:55,860 --> 00:08:59,820
теперь у вас есть это в ваших руках с местной историей в PyCharm.

135
00:09:00,480 --> 00:09:05,130
Теперь еще одна очень удобная функция — возможность просматривать структуру вашего

136
00:09:05,130 --> 00:09:08,610
код. Вместо перехода к навигации по проекту,

137
00:09:08,640 --> 00:09:11,130
если я нажму на эту панель структуры здесь

138
00:09:11,580 --> 00:09:16,580
вы можете видеть, что он разбивает мой код на все переменные и все

139
00:09:16,860 --> 00:09:21,180
функции. Это означает, что моя функция может быть объявлена, знаете ли,

140
00:09:21,210 --> 00:09:24,270
много сотен строк где-то еще,

141
00:09:24,630 --> 00:09:28,080
и я прокручиваю вокруг, и я пытаюсь найти его.

142
00:09:28,410 --> 00:09:32,490
Все, что мне нужно сделать, это посмотреть, вот моя функция,

143
00:09:32,730 --> 00:09:33,690
и если я нажму на него

144
00:09:33,930 --> 00:09:37,860
он ведет меня прямо туда, и теперь я могу отредактировать его, если захочу.

145
00:09:38,130 --> 00:09:41,040
И если бы мне понадобилась переменная jenny_email, ну

146
00:09:41,040 --> 00:09:42,630
меня тоже туда заносит.

147
00:09:42,750 --> 00:09:46,650
Как только вы начнете иметь много-много переменных и множество-много функций,

148
00:09:47,010 --> 00:09:48,570
это спасатель.

149
00:09:49,320 --> 00:09:53,280
Теперь есть много других функций, которые я собираюсь показать вам, что PyCharm

150
00:09:53,290 --> 00:09:56,250
можно сделать, но я хочу делать это постепенно. Пока что

151
00:09:56,310 --> 00:09:58,380
вот последний совет по PyCharm.

152
00:09:58,980 --> 00:10:03,980
Всякий раз, когда вы создаете переменную или имя функции и в конечном итоге используете ее в

153
00:10:04,740 --> 00:10:06,900
много где, например

154
00:10:06,900 --> 00:10:11,340
вы можете вызвать my_function здесь, а затем вы можете снова вызвать my_function

155
00:10:11,340 --> 00:10:15,270
передача некоторых других параметров в какой-то более поздний момент времени.

156
00:10:15,810 --> 00:10:17,700
И тогда вы решаете, что на самом деле,

157
00:10:18,120 --> 00:10:21,000
Мне действительно не нравится, как я назвал эту функцию.

158
00:10:21,420 --> 00:10:26,420
Было бы гораздо логичнее, если бы он назывался add, потому что он возвращает

159
00:10:26,970 --> 00:10:31,500
полное право? Если бы я делал это вручную в редакторе кода,

160
00:10:31,500 --> 00:10:32,880
Я должен был бы добавить,

161
00:10:33,150 --> 00:10:37,530
а потом все эти строки разорвутся и я должен их все найти и тогда

162
00:10:37,530 --> 00:10:40,050
изменить их вручную. И это очень больно.

163
00:10:40,590 --> 00:10:43,890
Вместо этого в PyCharm вы можете

164
00:10:43,980 --> 00:10:48,980
щелкните правой кнопкой мыши имя вашей функции или вашей переменной, перейдите к рефакторингу -> переименовать.

165
00:10:50,790 --> 00:10:55,590
И теперь он найдет все места, где эта функция создана,

166
00:10:55,620 --> 00:10:59,100
там, где он называется, и теперь вы можете изменить его везде.

167
00:10:59,490 --> 00:11:01,080
Итак, нажмите рефакторинг,

168
00:11:01,560 --> 00:11:06,560
и вот нашел функцию которую нужно переименовать а так же все места

169
00:11:07,440 --> 00:11:10,770
где он используется. Так что это используется в двух местах, здесь

170
00:11:10,770 --> 00:11:13,140
в строке 11 и здесь в строке 14.

171
00:11:13,560 --> 00:11:18,560
Итак, теперь я нажимаю «Выполнить рефакторинг», и что произойдет, так это то, что он изменит все места, где

172
00:11:20,250 --> 00:11:22,590
такое случается. И это много,

173
00:11:22,590 --> 00:11:26,160
гораздо безопаснее, чем просто использовать поиск и замену.

174
00:11:26,520 --> 00:11:30,420
Скажем, у меня здесь было печатное заявление, в котором говорилось, гм,

175
00:11:30,450 --> 00:11:33,090
my_function — это функция.

176
00:11:33,990 --> 00:11:37,110
И если бы я использовал найти и заменить, где я просто сказал бы, ну,

177
00:11:37,110 --> 00:11:42,110
my_function теперь равно add, и я нажимаю заменить все,

178
00:11:42,420 --> 00:11:47,160
это собирается теперь изменить это во всех местах. Но с другой стороны,

179
00:11:47,160 --> 00:11:49,020
если я использую рефакторинг -> переименовать,

180
00:11:49,590 --> 00:11:54,590
тогда он будет достаточно умен, чтобы знать, что это выражение печати

181
00:11:55,000 --> 00:11:55,470
только

182
00:11:55,470 --> 00:11:57,630
текст, тогда как места

183
00:11:57,630 --> 00:12:02,630
где используется моя функция и места, где моя функция объявлена,

184
00:12:02,880 --> 00:12:05,640
это то, что я хочу реорганизовать и переименовать.

185
00:12:05,820 --> 00:12:09,090
И это оставляет всех невинных прохожих в покое.

186
00:12:10,080 --> 00:12:15,080
Впереди еще много действительно захватывающих вещей, когда мы начинаем привыкать к

187
00:12:15,120 --> 00:12:18,540
с помощью PyCharm. Но, как и с любым новым инструментом,

188
00:12:18,840 --> 00:12:22,530
вы потратите немного времени на то, чтобы начать работу с ним и получить

189
00:12:22,530 --> 00:12:26,190
привык использовать его. Теперь, когда я учился в начальной школе,

190
00:12:26,520 --> 00:12:31,520
Я до сих пор помню тот момент, когда я закончил писать карандашами

191
00:12:32,220 --> 00:12:35,640
к письму рукописной ручкой Berol.

192
00:12:36,150 --> 00:12:41,150
И это был действительно важный момент в моей жизни, когда мне разрешили писать

193
00:12:41,250 --> 00:12:46,230
с инструментами для взрослых. Вот что происходит прямо здесь.

194
00:12:46,560 --> 00:12:48,270
Мы переходим на PyCharm.

195
00:12:48,510 --> 00:12:52,320
Потребуется немного привыкнуть и изучить наши веревки,

196
00:12:52,620 --> 00:12:55,170
но это приблизит нас к нашим целям.

197
00:12:55,710 --> 00:13:00,300
Надеюсь, к настоящему времени PyCharm должен быть загружен, и вы готовы отправиться в путь.

198
00:13:00,300 --> 00:13:03,450
к следующему уроку, где мы собираемся установить его.

