1
00:00:00,150 --> 00:00:00,540
В настоящее время,

2
00:00:00,540 --> 00:00:05,540
существует так много возможных решений для создания этой программы для кофемашины

3
00:00:05,760 --> 00:00:10,760
удовлетворяющий всем требованиям. И то, как вы это кодируете, по сути

4
00:00:12,000 --> 00:00:13,080
твой выбор, да?

5
00:00:13,440 --> 00:00:17,970
Независимо от того, решите ли вы использовать цикл while или использовать цикл for или создать

6
00:00:17,970 --> 00:00:21,540
различные структуры данных, есть безграничные возможности.

7
00:00:21,840 --> 00:00:25,320
То, что я собираюсь показать вам сейчас, является лишь одной из таких возможностей.

8
00:00:25,890 --> 00:00:29,790
И что действительно важно, вы не чувствуете, что сделали это неправильно

я
00:00:29,790 --> 00:00:33,120
просто потому, что он отличается от моего. Пока это работает

10
00:00:33,120 --> 00:00:36,900
так, как вы этого ожидаете, то считайте себя успешным.

11
00:00:37,650 --> 00:00:41,520
Первое, что я собираюсь сделать, это создать новый проект в PyCharm,

12
00:00:41,910 --> 00:00:46,740
и я собираюсь назвать свой проект кофеваркой. Еще раз,

13
00:00:46,770 --> 00:00:51,570
убедившись, что у меня установлена ​​последняя версия Python в качестве интерпретатора.

14
00:00:51,570 --> 00:00:52,403
нажмите

15
00:00:52,490 --> 00:00:53,323
Создайте.

16
00:00:54,860 --> 00:00:58,700
Теперь, когда первое, что я собираюсь сделать, это щелкнуть правой кнопкой мыши и создать

17
00:00:58,730 --> 00:01:02,210
новый файл, который будет моим main.py.

18
00:01:02,810 --> 00:01:07,160
А потом я собираюсь перейти к своему стартовому проекту в Repl.it и просто собираюсь

19
00:01:07,160 --> 00:01:12,160
скопируйте все, что есть здесь, и вставьте в этот файл main.py.

20
00:01:13,370 --> 00:01:18,370
Теперь вы можете найти шрифт вашего кода или PyCharm слишком большим или

21
00:01:19,190 --> 00:01:21,350
слишком маленький. Если это так,

22
00:01:21,350 --> 00:01:26,350
вы можете просто зайти в настройки и изменить внешний вид и шрифт на

23
00:01:27,830 --> 00:01:30,680
другой размер. И это для пользовательского интерфейса.

24
00:01:31,130 --> 00:01:35,210
А если вы хотите изменить шрифт редактора, то можете зайти сюда,

25
00:01:35,270 --> 00:01:38,120
перейдите к шрифту, а затем измените этот размер здесь.

26
00:01:38,600 --> 00:01:41,810
Я постарался сделать его как можно больше, чтобы, когда вы смотрели на это

27
00:01:41,810 --> 00:01:46,100
видео на iPad или iPhone, весь код остается читаемым.

28
00:01:46,460 --> 00:01:48,230
Но, конечно, обычно, когда вы программируете,

29
00:01:48,230 --> 00:01:52,250
вы, вероятно, захотите разместить больше строк на одном экране,

30
00:01:52,730 --> 00:01:56,300
но нехорошо напрягать глаза. Так что постарайтесь соблюсти баланс.

31
00:01:57,110 --> 00:02:00,800
Теперь я собираюсь свернуть эту боковую панель, потому что я буду полностью программировать.

32
00:02:00,800 --> 00:02:01,880
в этом одном файле.

33
00:02:02,510 --> 00:02:06,080
Теперь обратите внимание, что в начале мы получаем меню,

34
00:02:07,070 --> 00:02:11,210
и это словарь, который содержит три статьи.

35
00:02:11,690 --> 00:02:15,050
И в каждой из этих записей есть название напитка,

36
00:02:15,140 --> 00:02:16,820
эспрессо, латте и капучино.

37
00:02:17,210 --> 00:02:21,140
И тогда у каждого из них есть значение, которое содержит кучу данных,

38
00:02:21,500 --> 00:02:24,650
включая ингредиенты, необходимые для приготовления этого напитка

39
00:02:24,980 --> 00:02:29,840
а также цена напитка. Теперь есть и словарь ресурсов,

40
00:02:29,870 --> 00:02:32,900
в котором хранятся ресурсы кофемашины.

41
00:02:33,740 --> 00:02:36,440
Теперь, когда у нас есть все это, мы готовы к работе.

42
00:02:37,070 --> 00:02:39,740
Я собираюсь решать эти требования один за другим.

43
00:02:40,370 --> 00:02:43,670
И первый говорит, чтобы подсказать пользователю, спросив,

44
00:02:43,700 --> 00:02:46,880
что тебе нравится? Эспрессо, латте или капучино.

45
00:02:46,880 --> 00:02:51,880
Так что я на самом деле просто скопирую эту строку и вставлю в

46
00:02:51,950 --> 00:02:55,730
вход. Это будет сохранено в какой-то переменной,

47
00:02:55,730 --> 00:02:57,140
который я назову выбором.

48
00:02:58,550 --> 00:03:03,010
Теперь он говорит мне, что подсказка должна отображаться каждый раз, когда действие завершено.

49
00:03:03,280 --> 00:03:03,820
Например,

50
00:03:03,820 --> 00:03:07,660
как только напиток выдается, и он должен показывать снова, и снова, и снова.

51
00:03:07,930 --> 00:03:11,970
Так что это означает, что нам, вероятно, придется внедрить этот ввод в какое-то время.

52
00:03:11,970 --> 00:03:16,270
петля. Так что я просто хочу сказать, пока что-то правда,

53
00:03:16,570 --> 00:03:20,110
затем продолжайте запрашивать эту подсказку. Сейчас

54
00:03:20,140 --> 00:03:25,140
если мы решим пойти и запустить этот код, куда мы идем, чтобы запустить, а затем нажмите на это

55
00:03:25,540 --> 00:03:29,140
кнопку, а затем выберите main.py для запуска,

56
00:03:29,800 --> 00:03:33,790
тогда вы можете видеть, что он спрашивает меня, что бы вы хотели? И если я внес вклад,

57
00:03:33,880 --> 00:03:36,910
он будет продолжать спрашивать меня до вечности, по сути,

58
00:03:36,910 --> 00:03:40,870
потому что в настоящее время нет способа превратить эту истину в ложь.

59
00:03:41,740 --> 00:03:43,720
Итак, давайте посмотрим на следующее требование.

60
00:03:43,900 --> 00:03:48,010
Мы должны иметь возможность выключить кофемашину, введя команду off в подсказку.

61
00:03:48,610 --> 00:03:50,290
Для тех, кто обслуживает кофемашину,

62
00:03:50,290 --> 00:03:54,160
они могут использовать off как секретное слово для выключения машины, и ваш код должен

63
00:03:54,160 --> 00:03:58,450
завершить выполнение, когда это произойдет. Поэтому, когда кто-то хочет купить кофе,

64
00:03:58,480 --> 00:04:03,160
это линия, которую они видят. Но когда появляется ремонтник,

65
00:04:03,160 --> 00:04:05,140
тогда они должны иметь возможность что-то ввести.

66
00:04:05,500 --> 00:04:08,290
И если этот выбор совпадает с секретным кодом,

67
00:04:08,590 --> 00:04:13,090
который отключен, то в этом случае мы должны остановить цикл while и выйти.

68
00:04:13,510 --> 00:04:18,510
Так что это дает нам способ изменить эту истину на какую-то другую форму переменной,

69
00:04:18,870 --> 00:04:22,320
правильно? Таким образом, мы могли бы создать новый код переменной is_on,

70
00:04:22,650 --> 00:04:27,180
запустите его как true, и пока машина включена,

71
00:04:27,510 --> 00:04:31,530
затем он должен продолжать цикл и запрашивать у пользователя его выбор.

72
00:04:31,890 --> 00:04:35,280
Но если выбор окажется неверным, тогда мы повернем

73
00:04:35,280 --> 00:04:39,060
это is_on в ложь. В настоящее время,

74
00:04:39,060 --> 00:04:40,650
если мы снова запустим наш код,

75
00:04:40,650 --> 00:04:44,790
так что теперь, когда вы запустили его один раз, вы можете либо остановить его, либо перезапустить,

76
00:04:45,390 --> 00:04:49,770
и теперь он остановит ваш существующий код и перезапустит код.

77
00:04:50,040 --> 00:04:52,140
Так что, если вы не хотите каждый раз видеть этот диалог,

78
00:04:52,170 --> 00:04:55,230
затем просто установите этот флажок, а затем нажмите кнопку «Стоп» и повторите запуск.

79
00:04:55,950 --> 00:05:00,950
Так что теперь, если мы сделаем выбор или скажем что-то в основном что-нибудь кроме

80
00:05:01,380 --> 00:05:02,970
ключевое слово, которое выключено,

81
00:05:03,240 --> 00:05:06,810
он будет крутиться взад и вперед и продолжать подсказывать нам.

82
00:05:07,170 --> 00:05:12,170
Но если я скажу выключить, то машина выключится, и вы увидите, что я вышел

83
00:05:12,870 --> 00:05:16,920
программа. Теперь мы взялись за 1 и 2.

84
00:05:16,950 --> 00:05:21,930
Давайте перейдем к номеру 3. Когда пользователь вводит отчет по ключевому слову,

85
00:05:21,930 --> 00:05:24,600
подсказка, еще одно секретное слово, отчет

86
00:05:24,630 --> 00:05:28,410
должен быть сгенерирован, который показывает текущие значения ресурсов. Например,

87
00:05:28,410 --> 00:05:33,150
вода, молоко, кофе и деньги. Итак, как мы можем это сделать? Ну, во-первых,

88
00:05:33,180 --> 00:05:36,360
на самом деле у нас нет переменной, которая содержит сумму денег.

89
00:05:36,690 --> 00:05:37,950
Итак, давайте создадим что-нибудь,

90
00:05:37,950 --> 00:05:41,940
давайте назовем это, может быть, прибылью и для начала установим его равным нулю.

91
00:05:42,240 --> 00:05:44,790
У нашей машины вначале пустая копилка.

92
00:05:45,390 --> 00:05:48,720
Итак, теперь мы должны проверить, ну, Элиф

93
00:05:48,750 --> 00:05:52,590
выбор был равен отчету. Ну, в этом случае,

94
00:05:52,620 --> 00:05:57,620
мы должны сгенерировать отчет, и отчет в основном будет печатать все

95
00:05:58,820 --> 00:06:00,500
значения этих ресурсов.

96
00:06:01,010 --> 00:06:06,010
Поэтому я просто скопирую ожидаемый результат и вставлю его сюда.

97
00:06:07,550 --> 00:06:12,080
И затем мы можем попытаться превратить это в операторы печати,

98
00:06:12,170 --> 00:06:16,220
делая его динамическим, а не жестко запрограммированным. В моем случае,

99
00:06:16,220 --> 00:06:19,670
Я хочу добавить печать перед всеми этими строками.

100
00:06:19,790 --> 00:06:23,990
А раньше мы делали это, просто записывая одно за другим,

101
00:06:23,990 --> 00:06:25,970
а затем, возможно, мы могли бы скопировать и вставить его.

102
00:06:26,330 --> 00:06:30,890
Но позвольте мне показать вам быстрый совет, который вы можете сделать в PyCharm. Если вы используете Windows,

103
00:06:30,920 --> 00:06:35,510
зажмите альт и шифт на клавиатуре. Если вы на Mac,

104
00:06:35,540 --> 00:06:37,790
удерживайте опцию и клавишу Shift.

105
00:06:38,300 --> 00:06:42,710
Теперь нажмите в начале и удерживайте и перетащите вниз.

106
00:06:43,580 --> 00:06:45,470
Так что, если это не сработает, попробуйте несколько раз,

107
00:06:45,470 --> 00:06:49,400
вы в конце концов освоитесь. Но обратите внимание, теперь у меня четыре курсора.

108
00:06:49,520 --> 00:06:52,580
и это означает, что когда я пишу печать, проверьте это.

109
00:06:53,870 --> 00:06:54,703
Разве это не круто?

110
00:06:55,550 --> 00:06:59,780
Мне удалось написать сразу четыре строки, потому что мне нужен этот повтор.

111
00:06:59,780 --> 00:07:03,980
функциональность, и это способ сделать многострочное редактирование.

112
00:07:04,190 --> 00:07:07,910
Запомните этот ярлык и используйте его в будущем, если сочтете его полезным.

113
00:07:08,480 --> 00:07:13,430
Так что я на самом деле собираюсь изменить все это на fstrings, потому что я хочу изменить

114
00:07:13,460 --> 00:07:16,160
эти числа вместо того, чтобы быть жестко запрограммированными,

115
00:07:16,490 --> 00:07:19,700
Я хочу вставить их сюда с помощью фигурных скобок.

116
00:07:20,210 --> 00:07:23,120
Вода хранится под ресурсами,

117
00:07:23,510 --> 00:07:26,270
и затем это в ключе, называемом водой.

118
00:07:27,830 --> 00:07:31,670
А теперь обратите внимание, что у меня есть внешняя двойная кавычка,

119
00:07:31,910 --> 00:07:33,770
поэтому у меня не может быть внутренней двойной кавычки.

120
00:07:33,770 --> 00:07:37,100
Поэтому я собираюсь заменить это на одинарные кавычки,

121
00:07:38,960 --> 00:07:42,530
вот так. И я собираюсь сделать то же самое для молока и кофе.

122
00:07:44,420 --> 00:07:48,590
Итак, теперь я добавил воду, молоко и кофе в свою печатную выписку.

123
00:07:48,620 --> 00:07:50,990
Все, что у меня осталось, это деньги.

124
00:07:51,230 --> 00:07:56,230
Итак, давайте удалим значение и вставим сюда прибыль.

125
00:07:57,020 --> 00:08:00,170
Теперь давайте снова запустим наш код и проверим его.

126
00:08:00,650 --> 00:08:05,650
Если я наберу отчет, он должен теперь дать мне отчет обо всех текущих значениях и

127
00:08:06,140 --> 00:08:10,130
деньги равны 0 долларов, потому что это то, с чего мы начинаем.

128
00:08:11,120 --> 00:08:14,540
Теперь мы готовы заняться номером 4. Вот

129
00:08:14,570 --> 00:08:19,370
мы должны убедиться, что когда пользователь выбирает напиток, мы собираемся проверить

130
00:08:19,370 --> 00:08:23,360
если есть достаточно ресурсов, чтобы сделать тот конкретный напиток, который они выбрали.

131
00:08:23,690 --> 00:08:26,630
Например, если для латте требуется 200 мл воды

132
00:08:26,930 --> 00:08:29,390
но в машине осталось всего 100мл,

133
00:08:29,750 --> 00:08:32,960
он не должен делать напиток, потому что он на самом деле не может сделать напиток

134
00:08:33,290 --> 00:08:37,390
и он напечатает: «Извините, мало воды» или мало молока,

135
00:08:37,440 --> 00:08:39,320
не хватает кофе, каким бы он ни был.

136
00:08:39,770 --> 00:08:42,350
Итак, давайте займемся этой конкретной контрольной точкой.

137
00:08:43,910 --> 00:08:48,650
Теперь, когда у меня есть, если выборы равны, если выбор равен отчету.

138
00:08:48,980 --> 00:08:50,990
Теперь, если это не что-то из этого,

139
00:08:51,020 --> 00:08:54,080
тогда они, вероятно, будут вводить название напитка.

140
00:08:54,380 --> 00:08:56,820
Итак, давайте поймаем это, используя оператор else.

141
00:08:57,480 --> 00:08:59,430
И затем внутри этого оператора else

142
00:08:59,430 --> 00:09:04,350
Я собираюсь получить конкретный напиток, который они заказали, нажав на

143
00:09:04,350 --> 00:09:09,120
наш словарь меню, а затем, используя этот выбор, который они ввели в качестве ключа.

144
00:09:09,630 --> 00:09:14,190
Предположим, что конкретный напиток, который они выбрали, равен меню

145
00:09:14,610 --> 00:09:18,480
и тогда ключ, конечно, будет выбор.

146
00:09:18,930 --> 00:09:23,930
Так что теперь, если я просто распечатаю этот напиток и запущу свой код...

147
00:09:24,270 --> 00:09:29,270
Таким образом, ярлык для бега на самом деле заключается в удерживании элемента управления и R, и теперь

148
00:09:29,730 --> 00:09:34,200
он может спуститься сюда, и вы можете видеть, что он просит меня о том, что я хотел бы,

149
00:09:34,230 --> 00:09:38,010
так что я выберу латте. И что будет напечатано

150
00:09:38,040 --> 00:09:43,040
это запись латте в моем словаре рецептов здесь, так что это конкретное

151
00:09:44,010 --> 00:09:44,843
стоимость.

152
00:09:46,050 --> 00:09:50,070
Теперь, когда у меня есть это значение, хранящееся внутри переменной с именем drink,

153
00:09:50,340 --> 00:09:55,340
хорошо, тогда я могу подключиться к его ингредиентам и прокрутить каждый из ингредиентов

154
00:09:56,160 --> 00:10:00,600
сравнивая его с ресурсами и проверяя, достаточно ли их.

155
00:10:00,990 --> 00:10:04,680
Теперь это немного функциональности, которая, вероятно, должна быть самостоятельной.

156
00:10:04,680 --> 00:10:07,950
содержится. Поэтому вместо того, чтобы просто печатать напиток,

157
00:10:07,950 --> 00:10:11,520
Я на самом деле собираюсь создать новую функцию. Итак, здесь,

158
00:10:11,520 --> 00:10:15,930
Я собираюсь создать новую функцию с нашим определением и назову ее is_

159
00:10:15,960 --> 00:10:17,940
ресурс_достаточный.

160
00:10:20,370 --> 00:10:25,370
И это is_resource_efficient будет принимать ингредиенты заказа в качестве

161
00:10:27,180 --> 00:10:29,910
ввод, а затем он будет работать над этим.

162
00:10:29,910 --> 00:10:34,860
Итак, если мы хотим вызвать эту функцию и передать ингредиенты заказа, у нас будет

163
00:10:34,860 --> 00:10:36,930
для вызова is_resource_efficient

164
00:10:37,410 --> 00:10:42,410
а потом другие ингредиенты будут из напитка и потом достанутся

165
00:10:43,350 --> 00:10:46,470
значения под ключевыми ингредиентами.

166
00:10:48,860 --> 00:10:49,580
Все в порядке.

167
00:10:49,580 --> 00:10:54,350
Таким образом, под этим конкретным ключом он будет получать этот конкретный словарь.

168
00:10:54,710 --> 00:10:58,880
И это словарь, который будет передан этой функции как

169
00:10:58,880 --> 00:10:59,713
ввод.

170
00:11:00,140 --> 00:11:04,130
Итак, теперь, когда у нас есть словарь со всеми ингредиентами, которые

171
00:11:04,130 --> 00:11:06,950
необходимое количество и количество каждого ингредиента,

172
00:11:07,250 --> 00:11:09,950
теперь мы можем сравнить его с нашими ресурсами

173
00:11:09,980 --> 00:11:14,980
который очень похож на словарь с ресурсами и количеством, которое осталось

174
00:11:15,800 --> 00:11:16,633
в машине.

175
00:11:17,750 --> 00:11:22,750
Мы можем пройтись по ингредиентам заказа и для каждого из предметов в

176
00:11:23,720 --> 00:11:24,380
ингредиенты,

177
00:11:24,380 --> 00:11:29,380
мы собираемся проверить, чтобы увидеть, если ингредиенты заказа в этом конкретном ключе,

178
00:11:30,080 --> 00:11:35,080
так что это получает значение, больше или равно ресурсам

179
00:11:37,700 --> 00:11:41,090
используя один и тот же ключ. Например,

180
00:11:41,090 --> 00:11:43,580
если бы мы смотрели на первый пример,

181
00:11:43,940 --> 00:11:46,580
предмет будет равен воде.

182
00:11:47,090 --> 00:11:51,020
Итак, если мы получим значение из ингредиентов заказа

183
00:11:51,050 --> 00:11:54,010
с ключом воды мы должны получить 200.

184
00:11:54,460 --> 00:11:59,460
И теперь мы должны проверить, является ли 200 больше или равным 300, которое

185
00:12:02,110 --> 00:12:05,050
у нас есть под ресурсы. Ну, в этом случае,

186
00:12:05,080 --> 00:12:09,370
тогда мы, вероятно, должны сказать пользователю, что на самом деле мы не можем этого сделать.

187
00:12:09,370 --> 00:12:14,370
Итак, давайте поместим туда оператор if, и я собираюсь использовать эту же строку здесь, чтобы

188
00:12:15,880 --> 00:12:16,713
Распечатай.

189
00:12:18,340 --> 00:12:22,000
Теперь обратите внимание, когда я вставил эту строку и

190
00:12:22,000 --> 00:12:27,000
здесь есть двойные кавычки из файла PDF, что на самом деле это не так

191
00:12:27,910 --> 00:12:29,740
распознан, и я получаю сообщение об ошибке здесь.

192
00:12:30,220 --> 00:12:33,820
И важно знать, что есть разница между декоративными

193
00:12:33,820 --> 00:12:35,260
двойные кавычки, как эти,

194
00:12:35,320 --> 00:12:38,680
которые выглядели по-разному для начальной и конечной цитаты.

195
00:12:39,130 --> 00:12:43,060
А еще есть программные двойные кавычки, которые выглядят так:

196
00:12:43,060 --> 00:12:44,770
так что я собираюсь выбрать всю эту строку

197
00:12:45,070 --> 00:12:50,070
и я собираюсь добавить двойную кавычку и заметить, как они выглядят одинаково из

198
00:12:50,260 --> 00:12:54,550
спереди и сзади. Так что теперь это будет печатать, извините

199
00:12:54,550 --> 00:12:56,050
не достаточно.

200
00:12:56,140 --> 00:12:59,560
И достаточно чего? Это будет

201
00:12:59,590 --> 00:13:01,990
элемент, который мы сейчас просматриваем.

202
00:13:02,500 --> 00:13:04,210
Итак, давайте изменим это на fstring

203
00:13:04,540 --> 00:13:08,080
что делает это активным фрагментом кода, который будет вставлен.

204
00:13:08,980 --> 00:13:09,880
И в этом случае

205
00:13:09,910 --> 00:13:14,530
мы собираемся вернуть false, потому что ресурсов недостаточно.

206
00:13:14,980 --> 00:13:16,210
Но иначе,

207
00:13:16,450 --> 00:13:21,130
если нам удалось добраться до конца цикла for и мы все еще не вернулись или

208
00:13:21,130 --> 00:13:25,420
вышел из функции, вернув false, то в этом случае

209
00:13:25,450 --> 00:13:26,560
мы можем вернуть true.

210
00:13:26,980 --> 00:13:30,520
Так что, если эта конкретная логика вас немного сбивает с толку,

211
00:13:30,520 --> 00:13:35,080
у вас может быть что-то вроде этого.

212
00:13:35,110 --> 00:13:39,730
Итак, у вас есть is_enough = true, и вы можете изменить is_enough

213
00:13:41,380 --> 00:13:42,640
является ложным.

214
00:13:42,910 --> 00:13:46,810
Если какой-либо из ингредиентов заказа больше ресурсов.

215
00:13:47,380 --> 00:13:51,250
И, наконец, в конце вы можете вернуть is_enough.

216
00:13:51,460 --> 00:13:55,630
Таким образом, в основном это остается верным, если одно из этих утверждений if не будет активировано.

217
00:13:56,800 --> 00:14:01,540
Но для простоты я на самом деле просто собираюсь сделать это простым.

218
00:14:02,140 --> 00:14:04,720
И теперь мы готовы получить этот результат здесь

219
00:14:05,140 --> 00:14:07,270
поэтому мы можем поместить здесь оператор if.

220
00:14:07,390 --> 00:14:10,630
Если ресурсов хватит на выпивку,

221
00:14:11,080 --> 00:14:14,800
то мы можем перейти к следующему шагу.

222
00:14:15,970 --> 00:14:18,580
Следующим шагом будет обработка монет.

223
00:14:18,730 --> 00:14:21,820
Пользователя спросят о количестве кварталов

224
00:14:21,820 --> 00:14:24,070
у них есть, количество десятицентовиков, пятицентовиков и пенни,

225
00:14:24,460 --> 00:14:26,950
и вы должны помнить их значения.

226
00:14:26,980 --> 00:14:31,000
Так что, если вы из США, это не должно быть проблемой. Но если ты похож на меня

227
00:14:31,030 --> 00:14:33,610
кто-то, кто не из США, гм,

228
00:14:33,640 --> 00:14:36,940
Я на самом деле нахожу это действительно запутанным, когда я еду в Штаты.

229
00:14:37,450 --> 00:14:41,860
Я всегда думаю, что более крупная монета, то есть никель, должна стоить больше, чем

230
00:14:41,860 --> 00:14:44,200
десять центов, но я думаю, что это просто я был глупым.

231
00:14:45,070 --> 00:14:49,570
Итак, мы собираемся попросить пользователя вставить несколько монет, мы собираемся это обработать.

232
00:14:49,630 --> 00:14:52,340
а затем мы собираемся рассчитать общую стоимость монет

233
00:14:52,340 --> 00:14:54,590
они вставили. Это, для меня,

234
00:14:54,590 --> 00:14:57,440
похоже, это тоже должна быть отдельная функция.

235
00:14:58,040 --> 00:15:02,120
Итак, давайте создадим здесь еще одну функцию, которую я назову process_coins.

236
00:15:04,130 --> 00:15:06,410
И это не собирается принимать никаких входных данных,

237
00:15:06,470 --> 00:15:10,610
но он вернет общую стоимость вставленных монет.

238
00:15:11,270 --> 00:15:13,310
Теперь, как мы обрабатываем монеты? Хорошо,

239
00:15:13,310 --> 00:15:18,310
сначала мы можем напечатать, чтобы попросить их вставить монеты.

240
00:15:19,340 --> 00:15:23,780
А потом мы как-нибудь подсчитаем итог, да?

241
00:15:23,810 --> 00:15:25,940
Это переменная, которую мы собираемся отслеживать.

242
00:15:26,270 --> 00:15:29,150
и мы собираемся вернуться в качестве вывода этой функции.

243
00:15:29,930 --> 00:15:34,160
Общая сумма будет рассчитана на основе четырех типов монет.

244
00:15:34,670 --> 00:15:38,600
Итак, первый вопрос, который мы им зададим, — сколько четвертаков?

245
00:15:40,700 --> 00:15:43,670
И это, конечно, будет целое число,

246
00:15:43,670 --> 00:15:46,910
поэтому мы собираемся превратить его из строки в целое число.

247
00:15:47,570 --> 00:15:51,860
И мы знаем, что каждый квартал стоит 0,25

248
00:15:51,860 --> 00:15:53,090
доллара,

249
00:15:53,390 --> 00:15:57,470
поэтому мы можем умножить количество кварталов на 0,25

250
00:15:57,770 --> 00:15:59,720
и тогда мы получим денежную стоимость.

251
00:16:01,190 --> 00:16:06,190
Теперь нам нужно сделать то же самое для кучи других монет.

252
00:16:06,980 --> 00:16:09,860
Так что вместо четвертаков это будут десятицентовики,

253
00:16:10,130 --> 00:16:14,690
а потом будут пятаки и, наконец,

254
00:16:14,690 --> 00:16:18,920
это будут копейки. Даймы стоят 10 центов,

255
00:16:19,310 --> 00:16:21,380
никель стоит 5 центов,

256
00:16:22,010 --> 00:16:26,030
а пенни стоят 1 цент. В настоящее время,

257
00:16:26,060 --> 00:16:30,950
вместо того, чтобы просто устанавливать итоги каждого из этих значений, каждое последующее

258
00:16:30,980 --> 00:16:32,240
кроме первого

259
00:16:32,240 --> 00:16:35,810
который помнит, создает эту переменную и устанавливает ее значение,

260
00:16:36,230 --> 00:16:41,230
каждый другой просто будет добавлен к текущему значению, как это.

261
00:16:42,620 --> 00:16:44,840
Итак, теперь, в самом конце всего этого,

262
00:16:44,870 --> 00:16:48,260
мы собираемся вернуть итог в качестве вывода.

263
00:16:48,740 --> 00:16:52,850
И всякий раз, когда у вас есть что-то, что возвращает как обе эти функции,

264
00:16:53,210 --> 00:16:56,960
вам, вероятно, следует добавить строку документации. Итак, в этом случае

265
00:16:56,960 --> 00:16:58,280
это возвращает

266
00:16:58,280 --> 00:17:02,870
сумма рассчитана из монет

267
00:17:02,870 --> 00:17:06,350
вставлен. И в этом случае

268
00:17:06,380 --> 00:17:11,380
что происходит, он возвращает true, когда заказ может быть сделан, и false

269
00:17:15,500 --> 00:17:19,130
если ингредиентов недостаточно.

270
00:17:20,990 --> 00:17:25,160
Теперь давайте назовем эту функцию, которую мы создали, process_coins.

271
00:17:25,850 --> 00:17:28,310
Если есть достаточно ресурсов, чтобы сделать напиток,

272
00:17:28,340 --> 00:17:31,520
тогда следующим шагом будет на самом деле попросить у них деньги.

273
00:17:31,820 --> 00:17:34,820
Итак, здесь мы собираемся называть процессные монеты.

274
00:17:35,450 --> 00:17:40,400
И обратите внимание, когда я пишу это и навожу курсор на него, вы можете увидеть эту строку документации

275
00:17:40,400 --> 00:17:43,700
мы только что написали, возвращает общее количество вставленных монет.

276
00:17:44,990 --> 00:17:47,180
Это означает, что это вернется

277
00:17:47,330 --> 00:17:52,110
и нам нужно зафиксировать оплату пользователя в этой переменной.

278
00:17:52,110 --> 00:17:56,760
Итак, это возвращает вывод, заменяющий этот вызов функции,

279
00:17:57,060 --> 00:18:01,230
а затем он сохраняется внутри этой переменной, называемой оплатой. В настоящее время,

280
00:18:01,230 --> 00:18:05,340
что мы будем делать с этой платой? Ну, это переходит к следующему шагу,

281
00:18:05,790 --> 00:18:08,970
который должен проверить, что транзакция прошла успешно.

282
00:18:09,270 --> 00:18:13,380
Таким образом, мы должны убедиться, что пользователь ввел достаточно денег, чтобы на самом деле

283
00:18:13,380 --> 00:18:18,060
купить напиток, который они хотели. Но каждый напиток, конечно, имеет разную цену.

284
00:18:18,330 --> 00:18:22,920
Итак, если пользователь введет достаточно денег, мы дадим ему сдачу.

285
00:18:23,250 --> 00:18:26,910
Но если они не вложили достаточно денег, то мы скажем, извините,

286
00:18:26,910 --> 00:18:29,460
это не достаточно денег. И деньги возвращаются.

287
00:18:30,240 --> 00:18:33,990
Но если они вложили достаточно денег, то стоимость напитка будет

288
00:18:33,990 --> 00:18:38,700
добавляется к машине в качестве прибыли. Итак, в следующий раз, когда мы вызовем отчет,

289
00:18:38,730 --> 00:18:42,570
тогда мы увидим увеличение денежной стоимости.

290
00:18:44,010 --> 00:18:44,490
Еще раз,

291
00:18:44,490 --> 00:18:48,900
давайте создадим новую функцию и избавимся от некоторых из этих волнистых линий,

292
00:18:48,900 --> 00:18:51,630
добавление достаточного количества пробелов между функциями.

293
00:18:52,530 --> 00:18:56,370
Эту я назову is_transaction_successful,

294
00:18:58,290 --> 00:19:00,810
потому что это в основном то, что мы собираемся проверять.

295
00:19:01,380 --> 00:19:03,990
И это займет два входа.

296
00:19:04,110 --> 00:19:08,520
Это будет ввод с точки зрения суммы денег, которая была получена,

297
00:19:09,180 --> 00:19:14,130
и у него также будет еще один вход, а именно стоимость напитка.

298
00:19:15,060 --> 00:19:20,060
Цель этой функции — вернуть true, когда платеж принят или

299
00:19:24,570 --> 00:19:25,980
собирается вернуть ложь

300
00:19:26,370 --> 00:19:29,610
если денег не хватает.

301
00:19:29,630 --> 00:19:30,463
хм

302
00:19:32,390 --> 00:19:36,410
Обратите внимание на эту строку справа от вашего редактора.

303
00:19:36,890 --> 00:19:41,890
В основном, что происходит, если у вас есть строка кода, которая слишком

304
00:19:41,930 --> 00:19:45,320
давным-давно рекомендация от PEP 8,

305
00:19:45,650 --> 00:19:50,150
вы можете видеть, что PEP 8 рекомендует, чтобы длина строки не превышала 120

306
00:19:50,150 --> 00:19:50,983
символы

307
00:19:51,140 --> 00:19:54,650
потому что это очень трудно читать тому, кто так прокручивает.

308
00:19:54,980 --> 00:19:55,880
Итак, в этом случае

309
00:19:55,880 --> 00:20:00,020
они хотели бы, чтобы вы поместили его на новую строку, чтобы вам не приходилось прокручивать

310
00:20:00,020 --> 00:20:03,500
и вы можете видеть все это на одном экране. Но в нашем случае,

311
00:20:03,500 --> 00:20:07,520
это не проблема, потому что мы не превысили длину строки

312
00:20:07,520 --> 00:20:08,353
рекомендация.

313
00:20:09,590 --> 00:20:13,790
Итак, как вы собираетесь проверить, прошла ли транзакция успешно?

314
00:20:14,420 --> 00:20:14,690
Хорошо,

315
00:20:14,690 --> 00:20:19,690
если полученные деньги больше или равны стоимости напитка, ну в таком случае

316
00:20:21,770 --> 00:20:26,300
это означает, что мы должны вернуть true, верно? Транзакция прошла успешно.

317
00:20:26,990 --> 00:20:30,530
А если не так, если наоборот,

318
00:20:30,860 --> 00:20:34,160
тогда мы собираемся печатать, извините, что не хватает денег.

319
00:20:34,220 --> 00:20:36,380
И деньги им возвращаются.

320
00:20:36,620 --> 00:20:37,453
Правильно.

321
00:20:39,590 --> 00:20:44,420
Итак, давайте напечатаем это здесь. И мы также собираемся вернуть false.

322
00:20:44,960 --> 00:20:48,340
Помните, что return должен быть последним в вашей функции.

323
00:20:48,400 --> 00:20:52,420
Если вы поместите это над оператором печати, тогда оператор печати никогда не будет

324
00:20:52,420 --> 00:20:55,840
получить вызов, и именно поэтому у вас есть этот основной момент. И если вы нажмете на нее,

325
00:20:55,840 --> 00:20:58,810
вы можете видеть, что он говорит вам, что этот код недоступен.

326
00:21:00,520 --> 00:21:04,780
Так что есть много этих маленьких советов и подсказок, которые действительно помогут вам, когда вы

327
00:21:04,780 --> 00:21:05,613
развивающийся.

328
00:21:06,340 --> 00:21:10,990
Но если пользователь внес достаточно денег, то стоимость напитка должна быть

329
00:21:10,990 --> 00:21:15,310
добавлено в машину как прибыль, чтобы мы могли увидеть это в следующем отчете

330
00:21:15,310 --> 00:21:16,143
срабатывает.

331
00:21:16,420 --> 00:21:21,420
Это означает, что если это money_received больше или равно стоимости напитка,

332
00:21:22,420 --> 00:21:27,420
затем мы собираемся добавить к этой переменной, называемой прибылью, которую мы имеем здесь,

333
00:21:28,870 --> 00:21:30,340
который начинается с нуля,

334
00:21:30,580 --> 00:21:34,420
но мы собираемся добавить стоимость напитков к прибыли.

335
00:21:34,720 --> 00:21:37,600
Итак, мы собираемся сказать, что прибыль += напиток_стоимость.

336
00:21:38,110 --> 00:21:41,740
И теперь вы увидите ошибку под прибылью

337
00:21:42,070 --> 00:21:45,100
потому что это действует внутри

338
00:21:45,130 --> 00:21:50,130
локальный охват и прибыль находятся снаружи в глобальном масштабе.

339
00:21:50,830 --> 00:21:54,550
Поэтому, чтобы достичь этого, мы должны сказать, глобальная прибыль.

340
00:21:56,260 --> 00:22:01,260
И последняя часть проверки транзакции — посмотреть, есть ли у пользователя

341
00:22:01,420 --> 00:22:06,070
вложил слишком много денег, то автомат предложит сдачу. Например,

342
00:22:06,340 --> 00:22:11,080
здесь, однако, много долларов в сдаче, и сдачу следует округлить до двух

343
00:22:11,080 --> 00:22:15,760
десятичные разряды. Опять же, это будет внутри этого оператора if.

344
00:22:16,420 --> 00:22:21,130
Таким образом, сдача будет равна полученной сумме денег,

345
00:22:21,430 --> 00:22:23,740
вычитая стоимость напитка.

346
00:22:24,280 --> 00:22:27,430
И это, конечно, может быть любое количество знаков после запятой.

347
00:22:28,060 --> 00:22:30,040
Таким образом, мы можем использовать функцию раунда

348
00:22:30,040 --> 00:22:34,150
которые вы давно видели, чтобы округлить это число

349
00:22:34,510 --> 00:22:38,230
а второй вход - количество десятичных знаков.

350
00:22:39,310 --> 00:22:43,270
Итак, если вы просто наведете курсор на имя функции, вы увидите, что документы появляются.

351
00:22:43,720 --> 00:22:48,670
и эта функция в основном собирается вокруг числа с заданной точностью в

352
00:22:48,670 --> 00:22:52,840
десятичные цифры. Итак, первое число, которое вы хотите округлить,

353
00:22:53,140 --> 00:22:57,850
а второе - количество цифр, которые вы хотите после точки

354
00:22:57,880 --> 00:23:02,080
в основном. Теперь, когда мы получили изменение,

355
00:23:02,110 --> 00:23:05,260
мы напечатаем и сообщим пользователю,

356
00:23:05,440 --> 00:23:09,730
в основном, вот это много долларов в сдаче.

357
00:23:11,260 --> 00:23:14,860
И, конечно же, я должен добавить F, чтобы активировать эту fstring.

358
00:23:16,570 --> 00:23:21,010
Итак, теперь мы готовы вызвать is_transaction_successful

359
00:23:21,550 --> 00:23:25,630
и мы собираемся передать money_received и drink_cost.

360
00:23:26,050 --> 00:23:30,280
Таким образом, money_received, конечно же, будет платежом с предыдущего шага.

361
00:23:30,730 --> 00:23:35,530
который был рассчитан из всех монет, а drink_cost будет основан

362
00:23:35,530 --> 00:23:38,650
на выпивку и это под ключ стоит,

363
00:23:38,980 --> 00:23:43,750
что мы можем подтвердить здесь. Итак, напиток - это словарь,

364
00:23:44,080 --> 00:23:46,550
а потом есть ингредиенты и стоимость.

365
00:23:48,760 --> 00:23:49,030
Правильно.

366
00:23:49,030 --> 00:23:54,030
Давайте перезапустим наш код и проверим его на чем-нибудь. скажем

367
00:23:54,070 --> 00:23:57,100
Я хочу латте. Пожалуйста, вставьте монеты.

368
00:23:57,280 --> 00:24:02,170
Допустим, мы попытались вставить недостаточное количество монет.

369
00:24:03,700 --> 00:24:07,150
Он говорит нам, извините, что недостаточно денег. Деньги возвращаются.

370
00:24:07,660 --> 00:24:11,020
Но давайте попробуем дать ему достаточно монет на этот раз.

371
00:24:13,750 --> 00:24:14,950
И в этом случае

372
00:24:14,980 --> 00:24:19,980
он принимает его и сообщает нам, что здесь 2,42 доллара сдачи, округленные до двух знаков после запятой,

373
00:24:21,700 --> 00:24:25,570
и мы готовы выпить еще. Так что теперь, если мы нажмем отчет,

374
00:24:25,630 --> 00:24:30,630
вы можете видеть, что теперь мы заработали немного денег на нашей машине, и весь наш код

375
00:24:30,730 --> 00:24:32,440
работает как положено.

376
00:24:33,550 --> 00:24:37,450
Итак, мы готовы приступить к последней части, а именно к приготовлению кофе.

377
00:24:38,050 --> 00:24:42,580
Если транзакция прошла успешно и ресурсов достаточно для совершения

378
00:24:42,580 --> 00:24:42,880
напитки

379
00:24:42,880 --> 00:24:47,350
пользователь выбрал, то ингредиенты для приготовления напитка должны быть вычтены из

380
00:24:47,350 --> 00:24:51,010
ресурсы кофемашины. Например, до того, как я купил латте

381
00:24:51,070 --> 00:24:52,660
У меня 300 мл воды.

382
00:24:53,050 --> 00:24:57,010
После того, как я купил латте, стоимость уменьшилась с 200 до 100,

383
00:24:57,340 --> 00:25:00,520
и то же самое происходит с другими значениями ингредиентов.

384
00:25:00,790 --> 00:25:04,750
Но, конечно, деньги растут, потому что я уже получил оплату в

385
00:25:04,750 --> 00:25:08,770
предыдущий шаг. Давайте возьмем это в оператор if

386
00:25:08,800 --> 00:25:13,800
потому что помните, что эта функция возвращает true, когда платеж принят или false

387
00:25:14,440 --> 00:25:15,820
если их денег недостаточно.

388
00:25:16,240 --> 00:25:19,510
Итак, здесь мы собираемся вызвать следующую функцию

389
00:25:19,540 --> 00:25:23,740
что варить кофе. Итак, давайте создадим

390
00:25:23,770 --> 00:25:27,940
сделать кофе. Для того, чтобы сделать кофе

391
00:25:27,940 --> 00:25:32,940
нам нужно знать название напитка, чтобы мы могли сообщить пользователю, что это ваш

392
00:25:33,910 --> 00:25:34,810
конкретный напиток.

393
00:25:35,230 --> 00:25:39,130
И он также должен иметь ингредиенты для заказа.

394
00:25:40,060 --> 00:25:45,060
Цель этой функции состоит в том, чтобы вычесть требуемые ингредиенты из

395
00:25:46,960 --> 00:25:49,660
Ресурсы. Чтобы сделать это,

396
00:25:49,840 --> 00:25:54,840
мы собираемся получить ингредиенты для заказа, и мы собираемся зациклить

397
00:25:55,900 --> 00:26:00,730
через них. Таким образом, для каждого из элементов в order_ingredients

398
00:26:01,630 --> 00:26:05,770
мы собираемся изучить ресурсы для этого конкретного элемента

399
00:26:06,220 --> 00:26:10,570
и мы собираемся вычесть сумму из order_ingredients.

400
00:26:11,620 --> 00:26:14,410
И как только все это будет сделано, цикл for

401
00:26:14,440 --> 00:26:19,440
заканчивается, тогда мы можем распечатать и даже добавить к этому смайлик.

402
00:26:21,160 --> 00:26:21,993
Правильно.

403
00:26:22,390 --> 00:26:22,930
На Mac

404
00:26:22,930 --> 00:26:27,850
Вы можете вставить смайлик, перейдя в меню редактирования, смайликов и символов. В Windows

405
00:26:27,850 --> 00:26:32,560
проще всего просто поискать в Google смайлики с кофе.

406
00:26:32,890 --> 00:26:35,200
а затем скопируйте и вставьте его в свой код.

407
00:26:35,860 --> 00:26:40,060
Теперь давайте вызовем здесь make_coffee и посмотрим, как

408
00:26:40,240 --> 00:26:42,940
если мы здесь машина включена

409
00:26:44,250 --> 00:26:47,610
и это не любой из этих предыдущих вариантов,

410
00:26:48,270 --> 00:26:52,530
и тогда ресурса достаточно и транзакция прошла успешно.

411
00:26:52,560 --> 00:26:57,560
Это все шаги, которые нам потребовались, чтобы добраться до этой конкретной стадии в нашей

412
00:26:57,630 --> 00:26:58,463
код.

413
00:26:58,680 --> 00:27:02,790
Итак, сейчас мы собираемся приготовить кофе и пропустим две вещи.

414
00:27:02,820 --> 00:27:06,900
Итак, давайте снова посмотрим на подсказку. Нам нужно дать название напитку

415
00:27:06,960 --> 00:27:11,960
который будет выбором, который ввел пользователь, и ингредиенты для заказа

416
00:27:12,060 --> 00:27:16,260
который будет исходить от напитка, и он находится под ключевыми ингредиентами.

417
00:27:17,700 --> 00:27:21,810
Итак, теперь мы готовы еще раз протестировать и запустить наш код.

418
00:27:22,230 --> 00:27:26,340
Скажем, я хочу латте и собираюсь положить много денег.

419
00:27:27,180 --> 00:27:31,200
А теперь у меня есть латте. Если я нажму отчет,

420
00:27:31,350 --> 00:27:36,150
вы должны увидеть, что куча ресурсов была вычтена, а

421
00:27:36,150 --> 00:27:40,800
деньги увеличиваются. Если я попытаюсь заказать еще один латте,

422
00:27:40,830 --> 00:27:45,750
это должно потерпеть неудачу, потому что не хватает воды и молока.

423
00:27:46,620 --> 00:27:51,030
Вы можете видеть, что это не позволит мне пройти до тех пор, пока один из

424
00:27:51,030 --> 00:27:52,770
ингредиентов не хватает.

425
00:27:54,390 --> 00:27:59,070
Итак, теперь нам удалось выполнить все требования к нашей кофемашине.

426
00:27:59,100 --> 00:28:00,450
программа. В настоящее время,

427
00:28:00,450 --> 00:28:04,620
это, вероятно, намного больше сложности, которую вы могли бы добавить к своей кофемашине,

428
00:28:05,010 --> 00:28:10,010
но в основном то, что я хотел показать вам сегодня, это то, как вы программируете что-то

429
00:28:11,160 --> 00:28:12,660
существующий в реальной жизни,

430
00:28:12,690 --> 00:28:17,690
как кофемашина и даже что-то такое простое, как кофеварка

431
00:28:18,030 --> 00:28:20,760
машина. Это может привести к большому количеству ошибок,

432
00:28:20,790 --> 00:28:25,080
много ошибок и много мучений, но это хорошо.

433
00:28:25,080 --> 00:28:26,370
Чем больше вы боретесь,

434
00:28:26,670 --> 00:28:31,170
тем ближе вы подходите к своим целям. И чем яснее роль функции,

435
00:28:31,560 --> 00:28:35,100
тем легче вам будет распутать логику.

436
00:28:36,480 --> 00:28:39,990
Если вы хотите взглянуть на завершенный код, который я написал в этом

437
00:28:39,990 --> 00:28:40,823
урок,

438
00:28:40,860 --> 00:28:45,000
затем просто перейдите по ссылке в ресурсах, и вы сможете

439
00:28:45,000 --> 00:28:45,720
увидеть это в

440
00:28:45,720 --> 00:28:50,700
Заменить Убедитесь, что вам удалось исправить все проблемы в коде.

441
00:28:51,060 --> 00:28:56,060
и что он работает точно так же, как и ожидалось в требованиях к программе.

